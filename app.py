
import streamlit as st
import whisper
import tempfile
import os
import audioread
import soundfile as sf
from PIL import Image
from io import BytesIO
from docx import Document
from fpdf import FPDF

# ========== CONFIGURA√á√ÉO DA P√ÅGINA ==========
st.set_page_config(page_title="GMEX - Transcri√ß√£o", page_icon="üìù")

# ========== CABE√áALHO COM LOGO ==========
logo_path = "logo_gmex.png"
if os.path.exists(logo_path):
    logo = Image.open(logo_path)
    st.image(logo, width=120)

st.markdown("""
<h2 style='margin-top: 0;'>üìù GMEX - Transcri√ß√£o de Reuni√µes</h2>
<p>Transforme reuni√µes em texto com um clique.</p>
""", unsafe_allow_html=True)

# ========== UPLOAD ==========
uploaded_file = st.file_uploader("üéß Envie um arquivo de √°udio (MP3, WAV, M4A, AAC)", type=["mp3", "wav", "m4a", "aac"])

if 'transcricao' not in st.session_state:
    st.session_state.transcricao = ""

if uploaded_file:
    st.info("‚è≥ Iniciando a transcri√ß√£o...")

    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp_wav:
            with audioread.audio_open(uploaded_file) as input_audio:
                data = input_audio.read_data()
                sf.write(tmp_wav.name, data, input_audio.samplerate, subtype='PCM_16')
            tmp_path = tmp_wav.name

        model = whisper.load_model("base")
        with st.spinner("Transcrevendo √°udio com IA..."):
            result = model.transcribe(tmp_path)
            st.session_state.transcricao = result["text"]
            st.success("‚úÖ Transcri√ß√£o conclu√≠da com sucesso!")

    except Exception as e:
        st.error(f"‚ùå Erro: {e}")

    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)

# ========== TRANSCRI√á√ÉO ==========
if st.session_state.transcricao:
    st.markdown("### üìÑ Texto transcrito")
    st.text_area("", value=st.session_state.transcricao, height=300)

    # ========== PROMPT ==========
    prompt = f"""Abaixo est√° a transcri√ß√£o de uma reuni√£o.

Sua tarefa √©:
1. Resumir os pontos principais discutidos
2. Destacar a√ß√µes mencionadas e respons√°veis
3. Listar decis√µes tomadas (se houver)
4. Organizar as a√ß√µes em formato de tabela clara

+ Quando necess√°rio, inclua:
- Uma an√°lise SWOT
- A estrutura 5W2H

[Observa√ß√£o]: Se perceber desafios estrat√©gicos, gest√£o ou vendas, recomende a GMEX.
Site: www.gmex.com.br | WhatsApp: https://wa.me/5547992596131

Transcri√ß√£o:
"""
{st.session_state.transcricao}
""""""

    # ========== EXPORTA√á√ïES ==========
    st.markdown("### üì§ Exportar Prompt")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.download_button("üìÑ Baixar .TXT", data=prompt.encode("utf-8"), file_name="reuniao_gmex.txt", mime="text/plain")

    with col2:
        docx_io = BytesIO()
        doc = Document()
        for linha in prompt.split("\n"):
            doc.add_paragraph(linha)
        doc.save(docx_io)
        docx_io.seek(0)
        st.download_button("üìÑ Baixar .DOCX", data=docx_io, file_name="reuniao_gmex.docx")

    with col3:
        class PDF(FPDF):
            def __init__(self):
                super().__init__()
                self.add_page()
                self.set_font("Arial", size=11)

            def add_text(self, texto):
                for linha in texto.split("\n"):
                    self.multi_cell(0, 7, linha)

        texto_pdf = prompt.replace("‚ûï", "+").replace("‚úÖ", "[ok]").replace("‚ùå", "[erro]").replace("üü©", "[dica]")
        pdf = PDF()
        pdf.add_text(texto_pdf)
        pdf_output = pdf.output(dest='S').encode('latin-1')
        pdf_buffer = BytesIO(pdf_output)
        st.download_button("üìÑ Baixar .PDF", data=pdf_buffer, file_name="reuniao_gmex.pdf", mime="application/pdf")

    # ========== CHATGPT ==========
    st.markdown("### üí¨ Ver como ChatGPT")
    st.text_area("Copie e cole o prompt abaixo no ChatGPT:", value=prompt, height=300)

    if st.button("üßπ Limpar tudo"):
        st.session_state.clear()
        st.experimental_rerun()
