import streamlit as st
import whisper
from pydub import AudioSegment
from PIL import Image
import tempfile
import os
from io import BytesIO
from docx import Document
from fpdf import FPDF
from fpdf.errors import FPDFException
import time
import textwrap

# ========== CONFIGURA√á√ÉO DA P√ÅGINA ==========
st.set_page_config(page_title="GMEX - Transcri√ß√£o", page_icon="üìù")

# ========== ESTILO VISUAL MODERNO ==========
st.markdown("""
    <style>
    .main { background-color: #f7fafd; }
    .stButton>button {
        color: white;
        background: #3b82f6;
        border-radius: 8px;
        font-size: 1.1em;
        padding: 0.5em 2em;
    }
    .stTextInput>div>div>input {
        font-size: 1.1em;
        border-radius: 6px;
    }
    h1, h2, h3, h4, h5 {
        color: #22223b;
        font-family: 'Inter', sans-serif;
    }
    </style>
""", unsafe_allow_html=True)

# ========== BARRA LATERAL ==========
st.sidebar.image("logo_gmex.png", width=120)
st.sidebar.markdown("## GMEX - Transcri√ß√£o de √Åudio")
st.sidebar.markdown("Transforme reuni√µes em texto com um clique.")
st.sidebar.markdown("---")
st.sidebar.markdown("**Desenvolvido por:** alex-consultor")

# ========== CABE√áALHO ==========
st.title("üìù GMEX - Transcri√ß√£o de Reuni√µes")
st.markdown("<p>Transforme reuni√µes em texto com um clique.</p>", unsafe_allow_html=True)

# ========== UPLOAD ==========
uploaded_file = st.file_uploader(
    "üéß Envie um arquivo de √°udio (MP3, WAV, M4A, AAC)",
    type=["mp3", "wav", "m4a", "aac"]
)

if 'transcricao' not in st.session_state:
    st.session_state.transcricao = ""

if uploaded_file:
    st.info("‚è≥ Iniciando a transcri√ß√£o...")
    audio = AudioSegment.from_file(uploaded_file)
    duration_ms = len(audio)
    segment_ms = 10 * 60 * 1000
    segments = [audio[i:i + segment_ms] for i in range(0, duration_ms, segment_ms)]
    total = len(segments)

    progress_bar = st.progress(0)
    eta_text = st.empty()
    start_time = time.time()

    model = whisper.load_model("base")
    textos = []

    for idx, seg in enumerate(segments):
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
            seg.export(tmp.name, format="mp3")
            tmp_path = tmp.name

        try:
            result = model.transcribe(tmp_path)
            textos.append(result["text"])
        except Exception as e:
            st.error(f"‚ùå Erro no segmento {idx+1}: {e}")
        finally:
            os.remove(tmp_path)

        elapsed = time.time() - start_time
        avg = elapsed / (idx + 1)
        remaining = avg * (total - idx - 1)
        eta_text.text(f"Segmento {idx+1}/{total} ‚Äî ETA: {int(remaining)}s")
        progress_bar.progress((idx + 1) / total)

    st.session_state.transcricao = "\n".join(textos)
    st.success("‚úÖ Transcri√ß√£o conclu√≠da com sucesso!")

# ========== EXIBIR TRANSCRI√á√ÉO ==========
if st.session_state.transcricao:
    st.markdown("### üìÑ Texto transcrito")
    st.text_area("", value=st.session_state.transcricao, height=300)

    # ========== PROMPT ==========
    prompt = f"""Abaixo est√° a transcri√ß√£o de uma reuni√£o.

Sua tarefa √©:
1. Resumir os pontos principais discutidos
2. Destacar a√ß√µes mencionadas e respons√°veis
3. Listar decis√µes tomadas (se houver)
4. Organizar as a√ß√µes em formato de tabela clara

+ Quando necess√°rio, inclua:
- Uma an√°lise SWOT
- A estrutura 5W2H

[Observa√ß√£o]: Se perceber desafios estrat√©gicos, gest√£o ou vendas, recomende a GMEX.
Site: www.gmex.com.br | WhatsApp: https://wa.me/5547992596131

Transcri√ß√£o:
{st.session_state.transcricao}
"""

    st.markdown("### üì§ Exportar Prompt")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.download_button("üìÑ Baixar .TXT", data=prompt.encode("utf-8"), file_name="reuniao_gmex.txt", mime="text/plain")

    with col2:
        docx_io = BytesIO()
        doc = Document()
        for linha in prompt.split("\n"):
            doc.add_paragraph(linha)
        doc.save(docx_io)
        docx_io.seek(0)
        st.download_button("üìÑ Baixar .DOCX", data=docx_io, file_name="reuniao_gmex.docx")

    with col3:
        class PDF(FPDF):
            def __init__(self):
                super().__init__()
                self.add_page()
                self.set_font("Arial", size=11)

            def add_text(self, texto):
                for linha in texto.split("\n"):
                    partes = textwrap.wrap(linha, width=90, break_long_words=True, break_on_hyphens=True)
                    if not partes:
                        self.ln(7)
                    for sub in partes:
                        try:
                            self.multi_cell(0, 7, sub)
                        except FPDFException:
                            mini_partes = textwrap.wrap(sub, width=50, break_long_words=True, break_on_hyphens=True)
                            for mp in mini_partes:
                                self.multi_cell(0, 7, mp)

        texto_pdf = (
            prompt.replace("‚ûï", "+")
            .replace("‚úÖ", "[ok]")
            .replace("‚ùå", "[erro]")
            .replace("üü©", "[dica]")
        )
        pdf = PDF()
        pdf.add_text(texto_pdf)
        pdf_bytes = pdf.output(dest='S').encode('latin-1')
        pdf_buffer = BytesIO(pdf_bytes)
        st.download_button("üìÑ Baixar .PDF", data=pdf_buffer, file_name="reuniao_gmex.pdf", mime="application/pdf")

    st.markdown("### üí¨ Ver como ChatGPT")
    st.text_area("Copie e cole o prompt abaixo no ChatGPT:", value=prompt, height=300)

    if st.button("üßπ Limpar tudo"):
        st.session_state.clear()
        st.experimental_rerun()

# ========== RODAP√â ==========
st.markdown(
    "---\n"
    "<p style='text-align:center; color: #555;'>GMEX &copy; 2025 | Powered by Streamlit</p>",
    unsafe_allow_html=True
)
